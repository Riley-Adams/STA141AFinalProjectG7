movies <- cbind(movies, return_prop)
# All movies with blank rating were rated R
for (i in 1:nrow(movies)){
if(movies$rating[i] == "")
movies$rating[i] <- "R"
}
# Combine "Unrated" to "Not Rated" -> "Unrated"
for (i in 1:nrow(movies)){
if(movies$rating[i] == "Not Rated")
movies$rating[i] <- "Unrated"
}
unique(movies$rating)
ggpairs(movies[,-1])
hist(movies$budget) #cut at bin before 1.0e+08
# run average release year, check overall distribution of year
# check average score between two groups
ggpairs(movies[,-1])
hist(movies$budget) #cut at bin before 1.0e+08
# run average release year, check overall distribution of year
# check average score between two groups
movies_num <- movies[unlist(lapply(movies, is.numeric))]
movies_num <- movies_num[-2]
cor(movies_num)
# Responding to Q1
ggpairs(movies[c("score", "votes")])
# From chart we see that the correlation is extremely significant.
var(movies$votes)
# From above note extremely high variability
densityPlot(log(movies$votes))
ggpairs(data.frame(movies$score, log(movies$votes)))
lm_num <- lm(score ~ ., data = movies_num)
summary(lm_num)
vif(lm_num)
# Responding to Q1
ggpairs(movies[c("score", "votes")])
# From chart we see that the correlation is extremely significant.
var(movies$votes)
# From above note extremely high variability
densityPlot(log(movies$votes))
ggpairs(data.frame(movies$score, log(movies$votes)))
hist(movies$budget, labels = TRUE) #cut at bin before 1.0e+08
# run average release year, check overall distribution of year
# check average score between two groups
?hist
hist(movies$budget, labels = TRUE,breaks = 18)
mov_hist <- hist(movies$budget, labels = TRUE,breaks = 18)
class(mov_hist)
mov_hist[5]
mov_hist
mov_hist$breaks[5]
#cut at bin before 1.0e+08
budget_cat <- character()
hist(movies$budget, labels = TRUE)
#cut at bin before 1.0e+08
budget_cat <- character()
mov_hist <- hist(movies$budget, labels = TRUE,breaks = 18)
for(i in nrow(movies)){
if (movies$budget[i] > mov_hist$breaks[5]){
budget_cat[i] <- "high"
}else{
budget_cat[i] <- "low"
}
}
# run average release year, check overall distribution of year
# check average score between two groups
mov_hist <- hist(movies$budget, labels = TRUE,breaks = 18)
mov_hist <- hist(movies$budget, labels = TRUE,breaks = 18)
#cut at bin before 1.0e+08
budget_cat <- character()
for(i in nrow(movies)){
if (movies$budget[i] > mov_hist$breaks[5]){
budget_cat[i] <- "high"
}else{
budget_cat[i] <- "low"
}
}
# run average release year, check overall distribution of year
# check average score between two groups
mov_hist <- hist(movies$budget, labels = TRUE,breaks = 18)
mov_hist
#cut at bin before 1.0e+08
budget_cat <- character()
for(i in nrow(movies)){
if (movies$budget[i] > mov_hist$breaks[5]){
budget_cat[i] <- "high"
}else{
budget_cat[i] <- "low"
}
}
# run average release year, check overall distribution of year
# check average score between two groups
mov_hist
hist(movies$budget, labels = TRUE,breaks = 18)
#cut at bin before 1.0e+08
mov_hist <- hist(movies$budget, labels = TRUE,breaks = 18)
budget_cat <- character()
for(i in nrow(movies)){
if (movies$budget[i] > mov_hist$breaks[5]){
budget_cat[i] <- "high"
}else{
budget_cat[i] <- "low"
}
}
# run average release year, check overall distribution of year
# check average score between two groups
hist(movies$budget, labels = TRUE,breaks = 18)
#cut at bin before 1.0e+08
mov_hist <- hist(movies$budget, labels = TRUE,breaks = 18)
budget_cat <- character()
for(i in nrow(movies)){
if (movies$budget[i] > mov_hist$breaks[5]){
budget_cat[i] <- "high"
}else{
budget_cat[i] <- "low"
}
}
movies <- cbind(movies, budget_cat)
# run average release year, check overall distribution of year
# check average score between two groups
movies$budget[1]
movies$budget[1]>mov_hist$breaks[5]
movies$budget[10]>mov_hist$breaks[5]
movies$budget[400]>mov_hist$breaks[5]
max(movies$budget)
which(max(movies$budget))
which.max(movies$budget)
movies$budget[4244]>mov_hist$breaks[5]
for(i in nrow(movies)){
if (movies$budget[i] > mov_hist$breaks[5]){
budget_cat[i] <- "high"
}else{
budget_cat[i] <- "low"
}
}
View(budget_cat)
mov_hist$breaks[5]
hist(movies$budget, labels = TRUE,breaks = 18)
#cut at bin before 1.0e+08
mov_hist <- hist(movies$budget, labels = TRUE,breaks = 18)
budget_cat <- character()
for(i in 1:nrow(movies)){
if (movies$budget[i] > mov_hist$breaks[5]){
budget_cat[i] <- "high"
}else{
budget_cat[i] <- "low"
}
}
movies <- cbind(movies, budget_cat)
# run average release year, check overall distribution of year
# check average score between two groups
ncol(movies)
movies_original <- read.csv("movies.csv")
dim(movies_original)
# Remove rows containing NA
movies <- movies_original[rowSums(is.na(movies_original)) == 0,]
# Create "month" using "released"
# A factor 1:12, indicating month of release
month <- numeric()
for (i in 1:length(movies$released)){
if (grepl("January", movies$released[i])){
month[i] <- 1
}else if (grepl("February", movies$released[i])){
month[i] <- 2
}else if (grepl("March", movies$released[i])){
month[i] <- 3
}else if (grepl("April", movies$released[i])){
month[i] <- 4
}else if (grepl("May", movies$released[i])){
month[i] <- 5
}else if (grepl("June", movies$released[i])){
month[i] <- 6
}else if (grepl("July", movies$released[i])){
month[i] <- 7
}else if (grepl("August", movies$released[i])){
month[i] <- 8
}else if (grepl("September", movies$released[i])){
month[i] <- 9
}else if (grepl("October", movies$released[i])){
month[i] <- 10
}else if (grepl("November", movies$released[i])){
month[i] <- 11
}else{
month[i] <- 12
}
}
movies <- cbind(movies, month)
movies$month <- as.factor(movies$month)
# Here we can see almost 80% of the movies are from the US
# Considering IMDb is a US-based database, isolate to the US only
# sum(movies$country == "United States")/dim(movies)[1]
movies <- movies[movies$country == "United States",]
# remove variable we will not be using
drops <- c("released","director","writer","star","company")
movies <- movies[, !(names(movies) %in% drops)]
rownames(movies) <- 1:nrow(movies)
# Reorganize columns
organized <- c("name", "rating", "runtime", "genre", "month", "year", "votes", "score", "budget", "gross")
movies <- movies[, organized]
# Create variable for gross/budget
return_prop <-  movies$gross / movies$budget
movies <- cbind(movies, return_prop)
# All movies with blank rating were rated R
for (i in 1:nrow(movies)){
if(movies$rating[i] == "")
movies$rating[i] <- "R"
}
# Combine "Unrated" to "Not Rated" -> "Unrated"
for (i in 1:nrow(movies)){
if(movies$rating[i] == "Not Rated")
movies$rating[i] <- "Unrated"
}
hist(movies$budget, labels = TRUE,breaks = 18)
#cut at bin before 1.0e+08
mov_hist <- hist(movies$budget, labels = TRUE,breaks = 18)
budget_cat <- character()
for(i in 1:nrow(movies)){
if (movies$budget[i] > mov_hist$breaks[5]){
budget_cat[i] <- "high"
}else{
budget_cat[i] <- "low"
}
}
movies <- cbind(movies, budget_cat)
# run average release year, check overall distribution of year
# check average score between two groups
colname(movies)
colnames(movies)
model1 <- (formula = score ~ rating + runtime + genre + month + year + votes + budget + gross + return_prop, data = movies)
model1 <- (formula = score ~ rating + runtime + genre + month + year + votes + budget + gross + return_prop , data = movies)
model1 <- lm(formula = score ~ rating + runtime + genre + month + year + votes + budget + gross + return_prop , data = movies)
model1 <- lm(formula = score ~ rating + runtime + genre + month + year + votes + budget + gross + return_prop , data = movies)
model1
View(model1)
class(month)
model1 <- lm(formula = score ~ rating + runtime + genre + month + year + votes + budget + gross + return_prop , data = movies)
summary(model1)
ggpairs(movies$score, movies$year)
ggpairs(data.frame(movies$score, movies$year))
model2 <- lm(formula = score ~ rating + runtime + year + votes + budget , data = movies)
model2 <- lm(formula = score ~ rating + runtime + year + votes + budget , data = movies)
summary(model2)
unique(movies$genre)
tally(movies$genre)
model1 <- lm(formula = score ~ rating + runtime + genre + month + year + votes + budget + gross + return_prop , data = movies)
summary(model1)
plot(model1)
model2 <- lm(formula = score ~ rating + runtime + year + votes + budget , data = movies)
summary(model2)
plot(model2)
plot(model1)
model1 <- lm(formula = score ~ rating + runtime + genre + month + year + votes + budget + gross + return_prop , data = movies)
summary(model1)
movies[2817]
movies[2817,]
# Libraries
require(dplyr)
require(ggplot2)
require(GGally)
require(lmtest)
require(car)
require(leaps)
# Model Selection
## Forward selection
model1_forward <- regsubsets(score ~ rating + runtime + genre + month + year + votes + budget + gross + return_prop,
data = movies, method = "forward")
cbind(summary(model1_forward)$which, "adjusted r^2" = summary(model1_forward)$adjr2)
cbind(summary(model1_forward)$which, "adjusted r^2" = summary(model1_forward)$adjr2)
# Model Selection
## Forward selection
model1_forward <- regsubsets(score ~ rating + runtime + genre + month + year + votes + budget + gross + return_prop,
data = movies, method = "forward")
cbind(summary(model1_forward)$which, "adjusted r^2" = summary(model1_forward)$adjr2)
## Backward selection
model1_backward <- regsubsets(score ~ rating + runtime + genre + month + year + votes + budget + gross + return_prop,
data = movies, method = "backward")
cbind(summary(model1_backward)$which, "adjusted r^2" = summary(model1_backward)$adjr2)
length(unique(movies$genre))
length(unique(movies$rating))
# ~~~~~ MODEL 2 ~~~~~~~~~
# fit model and summary output
model2 <- lm(formula = score ~ runtime + month + year + votes + budget + gross + return_prop , data = movies)
summary(model2)
# ~~~~~ MODEL 2 ~~~~~~~~~
# fit model and summary output
model2 <- lm(formula = score ~ runtime + votes + budget, data = movies)
summary(model2)
?scale
# residual analysis
plot(model2)
# run average release year, check overall distribution of year
mean(movies$year[movies$budget_cat == "low"])
mean(movies$year[movies$budget_cat == "high"])
# check average score between two groups (high budget/low budget)
mean(movies$score[movies$budget_cat == "low"])
mean(movies$score[movies$budget_cat == "high"])
hist(movies$budget, labels = TRUE,breaks = 18)
#cut at bin before 1.0e+08
mov_hist <- hist(movies$budget, labels = TRUE,breaks = 18)
budget_cat <- character()
for(i in 1:nrow(movies)){
if (movies$budget[i] > mov_hist$breaks[5]){
budget_cat[i] <- "high"
}else{
budget_cat[i] <- "low"
}
}
movies <- cbind(movies, budget_cat)
# run average release year, check overall distribution of year
mean(movies$year[movies$budget_cat == "low"])
mean(movies$year[movies$budget_cat == "high"])
# check average score between two groups (high budget/low budget)
mean(movies$score[movies$budget_cat == "low"])
mean(movies$score[movies$budget_cat == "high"])
mov_hist$breaks[5]
(159+78+65+67+44+40+9+7+9+3+2+1+1+1)/nrow(movies)
1*10^(8)
movies$budget_cat <- as.factor(budget_cat)
class(budget_cat)
class(movies$budget_cat)
hist(movies$budget, labels = TRUE,breaks = 18)
#cut at bin before 1.0e+08
mov_hist <- hist(movies$budget, labels = TRUE,breaks = 18)
budget_cat <- character()
for(i in 1:nrow(movies)){
if (movies$budget[i] > mov_hist$breaks[5]){
budget_cat[i] <- "high"
}else{
budget_cat[i] <- "low"
}
}
movies <- cbind(movies, budget_cat)
movies$budget_cat <- as.factor(budget_cat)
#calculate percentage of movies with high budget
(159+78+65+67+44+40+9+7+9+3+2+1+1+1)/nrow(movies)
# run average release year, check overall distribution of year
mean(movies$year[movies$budget_cat == "low"])
mean(movies$year[movies$budget_cat == "high"])
# check average score between two groups (high budget/low budget)
mean(movies$score[movies$budget_cat == "low"])
mean(movies$score[movies$budget_cat == "high"])
require(MASS)
# ~~~~ BoxCox Transformation ~~~~~~
# Boxcox for model2
boxcox(model2)
# fit model and summary output
model3 <- lm(formula = score_sq ~ runtime + votes + budget, data = movies)
# ~~~~~ MODEL 3 ~~~~~~~~~
# square outcome variable (score)
score_sq <- (score)^2
# ~~~~~ MODEL 3 ~~~~~~~~~
# square outcome variable (score)
score_sq <- (movies$score)^2
# fit model and summary output
model3 <- lm(formula = score_sq ~ runtime + votes + budget, data = movies)
summary(model3)
0.3945 - 0.3372
# residual analysis
plot(model3)
boxcox(model3)
movies[1148,]
movies[2889,]
movies[1147,]
# ~~~~~ MODEL 4 ~~~~~~~~~
# create vector containing highest leverage points.
# (Pulp Fiction, The Dark Knight, The Shawshank Redemption)
highlev <- c(1148,2889,1147)
# new dataframe without high leverage points
movies_lowlev <- movies[-highlev,]
# fit model and summary output
model4 <- lm(formula = score_sq ~ runtime + votes + budget, data = movies_lowlev)
# ~~~~~ MODEL 4 ~~~~~~~~~
# create vector containing highest leverage points.
# (Pulp Fiction, The Dark Knight, The Shawshank Redemption)
highlev <- c(1148,2889,1147)
# new dataframe without high leverage points
movies_lowlev <- movies[-highlev,]
# have to remove same values in score_sq
score_sq_ll <- score_sq[-highlev]
# fit model and summary output
model4 <- lm(formula = score_sq_ll ~ runtime + votes + budget, data = movies_lowlev)
summary(model4)
0.3968 - 0.3945
# residual analysis
plot(model4)
# ~~~~~ MODEL 4 ~~~~~~~~~
# create vector containing highest leverage points.
# (Pulp Fiction, The Dark Knight, The Shawshank Redemption)
highlev <- c(1148,2889,1147)
# new dataframe without high leverage points
movies_lowlev <- movies[-highlev,]
rownames(movies_lowlev) <- 1:nrow(movies_lowlev)
# have to remove same values in score_sq
score_sq_ll <- score_sq[-highlev]
# fit model and summary output
model4 <- lm(formula = score_sq_ll ~ runtime + votes + budget, data = movies_lowlev)
summary(model4)
# residual analysis
plot(model4)
movies_lowlev[1741]
movies_lowlev[1741,]
movies_lowlev[1147,]
movies_lowlev[3149,]
hl_2 <- c(1147,1147,3149)
movies_lowlev[hl_2,]
# high leverage
hl_2 <- c(1741,1147,3149)
movies_lowlev[hl_2,]
# seems like the movies that keep throwing off the model are those that are
# ~~~~~ MODEL 4 ~~~~~~~~~
# create vector containing highest leverage points.
# (Pulp Fiction, The Dark Knight, The Shawshank Redemption)
highlev <- c(1148,2889,1147)
movies[highlev,]
# new dataframe without high leverage points
movies_lowlev <- movies[-highlev,]
rownames(movies_lowlev) <- 1:nrow(movies_lowlev)
# have to remove same values in score_sq
score_sq_ll <- score_sq[-highlev]
# fit model and summary output
model4 <- lm(formula = score_sq_ll ~ runtime + votes + budget, data = movies_lowlev)
summary(model4)
# ~~~~~ MODEL 4 ~~~~~~~~~
# new dataframe without high leverage points
movies_lowlev2 <- movies_lowlev[-hl_2,]
rownames(movies_lowlev2) <- 1:nrow(movies_lowlev2)
# have to remove same values in score_sq_ll
score_sq_ll2 <- score_sq_ll[-hl_2]
# fit model and summary output
model5 <- lm(formula = score_sq_ll2 ~ runtime + votes + budget, data = movies_lowlev2)
summary(model5)
3984 - 0.3968
.3984 - 0.3968
# residual analysis
plot(model5)
# high leverage
hl_3 <- c(3409,3668,1256)
movies_lowlev2[hl_3,]
# high leverage
hl_3 <- c(3409,3668,1256)
movies_lowlev2[hl_3,]
boxcox(model5)
View(movies_lowlev2)
# ~~~~~ MODEL 6 ~~~~~~~~~
score_4th <- (score_sq_ll2)^2
# fit model and summary output
model6 <- lm(formula = score_4th ~ runtime + votes + budget, data = movies_lowlev2)
summary(model5)
# ~~~~~ MODEL 6 ~~~~~~~~~
score_4th <- (score_sq_ll2)^2
# fit model and summary output
model6 <- lm(formula = score_4th ~ runtime + votes + budget, data = movies_lowlev2)
summary(model6)
plot(model6)
0.4844 - 0.3984
# Model Selection
## Forward selection
model1_forward <- regsubsets(score ~ rating + runtime + genre + month + year + votes + budget + gross + return_prop,
data = movies, method = "forward")
cbind(summary(model1_forward)$which, "adjusted r^2" = summary(model1_forward)$adjr2)
## Backward selection
model1_backward <- regsubsets(score ~ rating + runtime + genre + month + year + votes + budget + gross + return_prop,
data = movies, method = "backward")
cbind(summary(model1_backward)$which, "adjusted r^2" = summary(model1_backward)$adjr2)
# Mallow's Cp
model1_subset <- regsubsets(score ~ rating + runtime + genre + month + year + votes + budget + gross + return_prop,
data = movies, method = "exhaustive")
cbind(summary(model1_subset)$which, "Mallows' Cp" = summary(model1_subset)$cp)
# ~~~~~~~~ Residual Analysis: Formal Tests ~~~~~~~~
#test for normality
shapiro.test(resid(model6))
# ~~~~~~~~ Residual Analysis: Formal Tests ~~~~~~~~
# Shapiro-Wilk Test
# test for normality
# H0: data are normally distributed
shapiro.test(resid(model6))
# we reject the null, so the residuals are not normal
# Box-Pierce Test
# test for correlated errors
# H0: The residuals are independently distributed
Box.test(model6)
# ~~~~~~~~ Residual Analysis: Formal Tests ~~~~~~~~
# Shapiro-Wilk Test
# test for normality
# H0: data are normally distributed
shapiro.test(resid(model6))
# we reject the null, so the residuals are not normal
# Box-Pierce Test
# test for correlated errors
# H0: The residuals are independently distributed
Box.test(model6$residuals)
# ~~~~~~~~ Residual Analysis: Formal Tests ~~~~~~~~
# Shapiro-Wilk Test
# test for normality
# H0: data are normally distributed
shapiro.test(resid(model6))
# we reject the null, so the residuals are not normal
# Box-Pierce Test
# test for correlated errors
# H0: The residuals are independently distributed
Box.test(model6$residuals)
# We reject the null, the residuals are independently distributed
# Breusch-Pagan Test
# test for homoskedasticity
# H0: the errors are homoskedastic
bptest(model6)
getwd()
setwd("I:/My Drive/Spring 2022/STA 141A/project/STA141AFinalProjectG7)
setwd("I:/My Drive/Spring 2022/STA 141A/project/STA141AFinalProjectG7)
getwd()
setwd("I:/My Drive/Spring 2022/STA 141A/project/STA141AFinalProjectG7)
setwd("I:/My Drive/Spring 2022/STA 141A/project/STA141AFinalProjectG7")
getwd()
