lty = 2)
budg_hist <-  hist(budget_scale,
col = 'lightblue',
labels = TRUE,
breaks = 18,
main = "Frequency of Movies by Budget",
xlab = "Budget (Millions of USD)")
abline(v = budg_hist$breaks[5],
col = "red",
lwd=3,
lty = 2)
text(x=50,y=1500,"blah")
text(x=50,y=1500,"Low Budget")
budg_hist <-  hist(budget_scale,
col = 'lightblue',
labels = TRUE,
breaks = 18,
main = "Frequency of Movies by Budget",
xlab = "Budget (Millions of USD)")
abline(v = budg_hist$breaks[5],
col = "red",
lwd=3,
lty = 2)
text(x=50,y=1500,"Low Budget")
text(x=85,y=1500,"High Budget")
text(x=100,y=1500,"High Budget")
budg_hist <-  hist(budget_scale,
col = 'lightblue',
labels = TRUE,
breaks = 18,
main = "Frequency of Movies by Budget",
xlab = "Budget (Millions of USD)")
abline(v = budg_hist$breaks[5],
col = "red",
lwd=3,
lty = 2)
text(x=50,y=1500,"Low Budget")
text(x=100,y=1500,"High Budget")
budg_hist <-  hist(budget_scale,
col = 'lightblue',
labels = TRUE,
breaks = 18,
main = "Frequency of Movies by Budget",
xlab = "Budget (Millions of USD)")
abline(v = budg_hist$breaks[5],
col = "red",
lwd=3,
lty = 2)
text(x=50,y=1500,"Low Budget")
text(x=150,y=1500,"High Budget")
budg_hist <-  hist(budget_scale,
col = 'lightblue',
labels = TRUE,
breaks = 18,
main = "Frequency of Movies by Budget",
xlab = "Budget (Millions of USD)")
abline(v = budg_hist$breaks[5],
col = "red",
lwd=3,
lty = 2)
text(x=50,y=1500,"Low Budget")
text(x=125,y=1500,"High Budget")
budg_hist <-  hist(budget_scale,
col = 'lightblue',
labels = TRUE,
breaks = 18,
main = "Frequency of Movies by Budget",
xlab = "Budget (Millions of USD)")
abline(v = budg_hist$breaks[5],
col = "red",
lwd=3,
lty = 2)
text(x=50,y=1500,"Low Budget")
text(x=115,y=1500,"High Budget")
text(x=0,y=-5,"80")
budg_hist <-  hist(budget_scale,
col = 'lightblue',
labels = TRUE,
breaks = 18,
main = "Frequency of Movies by Budget",
xlab = "Budget (Millions of USD)")
abline(v = budg_hist$breaks[5],
col = "red",
lwd=3,
lty = 2)
text(x=50,y=1500,"Low Budget")
text(x=115,y=1500,"High Budget")
text(x=80,y=-5,"80")
text(x=80,y=-10,"80")
text(x=80,y=-50,"80")
text(x=80,y=-70,"80")
text(x=80,y=-60,"80")
budg_hist <-  hist(budget_scale,
col = 'lightblue',
labels = TRUE,
breaks = 18,
main = "Frequency of Movies by Budget",
xlab = "Budget (Millions of USD)")
abline(v = budg_hist$breaks[5],
col = "red",
lwd=3,
lty = 2)
text(x=50,y=1500,"Low Budget")
text(x=115,y=1500,"High Budget")
legend("left", inset = 0.006, legend = "$80 Million", cex = 0.8)
legend(x = 115, y = 1000, inset = 0.006, legend = "$80 Million", cex = 0.8)
legend(x = 100, y = 1000, inset = 0.006, legend = "$80 Million", cex = 0.8)
legend(x = 90, y = 1000, inset = 0.006, legend = "$80 Million", cex = 0.8)
legend(x = 80, y = -10, inset = 0.006, legend = "$80 Million", cex = 0.8)
legend(x = 70, y = -10, inset = 0.006, legend = "$80 Million", cex = 0.8)
legend(x = 60, y = -10, inset = 0.006, legend = "$80 Million", cex = 0.8)
budg_hist <-  hist(budget_scale,
col = 'lightblue',
labels = TRUE,
breaks = 18,
main = "Frequency of Movies by Budget",
xlab = "Budget (Millions of USD)")
abline(v = budg_hist$breaks[5],
col = "red",
lwd=3,
lty = 2)
text(x=50,y=1500,"Low Budget")
text(x=115,y=1500,"High Budget")
legend(x = 60, y = -10, inset = 0.006, legend = "$80 Million", cex = 0.8)
# histogram for budget
budg_hist <-  hist(budget_scale,
col = 'lightblue',
labels = TRUE,
breaks = 18,
main = "Frequency of Movies by Budget",
xlab = "Budget (Millions of USD)")
abline(v = budg_hist$breaks[5],
col = "red",
lwd=3,
lty = 2)
text(x=50,y=1500,"Low Budget")
text(x=115,y=1500,"High Budget")
legend(x = 60, y = -10, inset = 0.006, legend = "$80 Million", cex = 0.5)
# histogram for budget
budg_hist <-  hist(budget_scale,
col = 'lightblue',
labels = TRUE,
breaks = 18,
main = "Frequency of Movies by Budget",
xlab = "Budget (Millions of USD)")
abline(v = budg_hist$breaks[5],
col = "red",
lwd=3,
lty = 2)
text(x=50,y=1500,"Low Budget")
text(x=115,y=1500,"High Budget")
legend(x = 60, y = -10, inset = 0.006, legend = "$80 Million", cex = 0.7)
legend(x = 60, y = 1200, inset = 0.006, legend = "$80 Million", cex = 0.7)
legend(x = 60, y = 1300, inset = 0.006, legend = "$80 Million", cex = 0.7)
legend(x = 60, y = 1400, inset = 0.006, legend = "$80 Million", cex = 0.7)
# scale budget
budget_scale <- moviesClean$budget / (10^6)
# histogram for budget
budg_hist <-  hist(budget_scale,
col = 'lightblue',
labels = TRUE,
breaks = 18,
main = "Frequency of Movies by Budget",
xlab = "Budget (Millions of USD)")
abline(v = budg_hist$breaks[5],
col = "red",
lwd=3,
lty = 2)
text(x=50,y=1500,"Low Budget")
text(x=115,y=1500,"High Budget")
legend(x = 60, y = 1400, inset = 0.006, legend = "$80 Million", cex = 0.7)
budg_hist
# define tick marks at bin lower limits
ticks <- numeric()
for (i in 1:length(budg_hist$breaks)){
ticks[i] <- budg_hist$breaks[i]
}
hist(budget_scale,
col = 'lightblue',
labels = TRUE,
breaks = 18,
main = "Frequency of Movies by Budget",
xlab = "Budget (Millions of USD)")
axis(1, at = ticks)
abline(v = budg_hist$breaks[5],
col = "red",
lwd=3,
lty = 2)
text(x=50,y=1500,"Low Budget")
text(x=115,y=1500,"High Budget")
legend(x = 60, y = 1400, inset = 0.006, legend = "$80 Million", cex = 0.7)
hist(budget_scale,
col = 'lightblue',
labels = TRUE,
breaks = 18,
main = "Frequency of Movies by Budget",
xlab = "Budget (Millions of USD)",
xaxt = "n")
axis(1, at = ticks)
abline(v = budg_hist$breaks[5],
col = "red",
lwd=3,
lty = 2)
text(x=50,y=1500,"Low Budget")
text(x=115,y=1500,"High Budget")
legend(x = 60, y = 1400, inset = 0.006, legend = "$80 Million", cex = 0.7)
# output histogram for budget
hist(budget_scale,
col = 'lightblue',
labels = TRUE,
breaks = 18,
main = "Frequency of Movies by Budget",
xlab = "Budget (Millions of USD)",
xaxt = "n")
axis(1, at = ticks)
abline(v = budg_hist$breaks[5],
col = "red",
lwd=3,
lty = 2)
text(x=50,y=1500,"Low Budget")
text(x=115,y=1500,"High Budget")
text(x=115,y=1300,"11.24%")
text(x=115,y=1400,"11.24%")
hist(budget_scale,
col = 'lightblue',
labels = TRUE,
breaks = 18,
main = "Frequency of Movies by Budget",
xlab = "Budget (Millions of USD)",
xaxt = "n")
axis(1, at = ticks)
abline(v = budg_hist$breaks[5],
col = "red",
lwd=3,
lty = 2)
text(x=50,y=1500,"Low Budget")
text(x=115,y=1500,"High Budget")
text(x=115,y=1400,"11.24%")
100-11.24
# output histogram for budget
hist(budget_scale,
col = 'lightblue',
labels = TRUE,
breaks = 18,
main = "Frequency of Movies by Budget",
xlab = "Budget (Millions of USD)",
xaxt = "n")
axis(1, at = ticks)
abline(v = budg_hist$breaks[5],
col = "red",
lwd=3,
lty = 2)
text(x=50,y=1500,"Low Budget")
text(x=50,y=1400,"88.76%")
text(x=115,y=1500,"High Budget")
text(x=115,y=1400,"11.24%")
knitr::include_graphics("plots/histBudget.png")
knitr::include_graphics("plots/boxplotYearBudget.png")
knitr::include_graphics("plots/boxplotScoreBudget.png")
# Libraries
require(dplyr)
require(ggplot2)
require(GGally)
require(lmtest)
require(car)
require(leaps)
require(MASS)
require(cluster)
movies_original <- read.csv("movies.csv")
dim(movies_original)
# Remove rows containing NA
movies <- movies_original[rowSums(is.na(movies_original)) == 0,]
# Create "month" using "released"
# A factor 1:12, indicating month of release
month <- numeric()
for (i in 1:length(movies$released)){
if (grepl("January", movies$released[i])){
month[i] <- 1
}else if (grepl("February", movies$released[i])){
month[i] <- 2
}else if (grepl("March", movies$released[i])){
month[i] <- 3
}else if (grepl("April", movies$released[i])){
month[i] <- 4
}else if (grepl("May", movies$released[i])){
month[i] <- 5
}else if (grepl("June", movies$released[i])){
month[i] <- 6
}else if (grepl("July", movies$released[i])){
month[i] <- 7
}else if (grepl("August", movies$released[i])){
month[i] <- 8
}else if (grepl("September", movies$released[i])){
month[i] <- 9
}else if (grepl("October", movies$released[i])){
month[i] <- 10
}else if (grepl("November", movies$released[i])){
month[i] <- 11
}else{
month[i] <- 12
}
}
movies <- cbind(movies, month)
movies$month <- as.factor(movies$month)
# Here we can see almost 80% of the movies are from the US
# Considering IMDb is a US-based database, isolate to the US only
# sum(movies$country == "United States")/dim(movies)[1]
movies <- movies[movies$country == "United States",]
# remove variable we will not be using
drops <- c("released","director","writer","star","company")
movies <- movies[, !(names(movies) %in% drops)]
rownames(movies) <- 1:nrow(movies)
# Reorganize columns
organized <- c("name", "rating", "runtime", "genre", "month", "year", "votes", "score", "budget", "gross")
movies <- movies[, organized]
# Create variable for gross/budget
return_prop <-  movies$gross / movies$budget
movies <- cbind(movies, return_prop)
# All movies with blank rating were rated R
for (i in 1:nrow(movies)){
if(movies$rating[i] == "")
movies$rating[i] <- "R"
}
# Combine "Unrated" to "Not Rated" -> "Unrated"
for (i in 1:nrow(movies)){
if(movies$rating[i] == "Not Rated")
movies$rating[i] <- "Unrated"
}
ggpairs(movies[,-1])
hist(movies$budget, labels = TRUE,breaks = 18)
#cut at bin before 1.0e+08
mov_hist <- hist(movies$budget, labels = TRUE,breaks = 18)
budget_cat <- character()
for(i in 1:nrow(movies)){
if (movies$budget[i] > mov_hist$breaks[5]){
budget_cat[i] <- "high"
}else{
budget_cat[i] <- "low"
}
}
movies <- cbind(movies, budget_cat)
movies$budget_cat <- as.factor(budget_cat)
#calculate percentage of movies with high budget
(159+78+65+67+44+40+9+7+9+3+2+1+1+1)/nrow(movies)
# run average release year, check overall distribution of year
mean(movies$year[movies$budget_cat == "low"])
mean(movies$year[movies$budget_cat == "high"])
# check average score between two groups (high budget/low budget)
mean(movies$score[movies$budget_cat == "low"])
mean(movies$score[movies$budget_cat == "high"])
movies_num <- movies[unlist(lapply(movies, is.numeric))]
movies_num <- movies_num[-2]
cor(movies_num)
# ~~~~~ Responding to Q1 ~~~~~
ggpairs(movies[c("score", "votes")])
# From chart we see that the correlation is extremely significant.
var(movies$votes)
# From above note extremely high variability
# ~~~~~ MODEL 1 ~~~~~
# fit model and summary output
model1 <- lm(formula = score ~ rating + runtime + genre + month + year + votes + budget + gross + return_prop , data = movies)
summary(model1)
# residual analysis
par(mfrow=c(2,2))
plot(model1)
par(mfrow=c(1,1))
# Model Selection
## Forward selection
model1_forward <- regsubsets(score ~ rating + runtime + genre + month + year + votes + budget + gross + return_prop,
data = movies, method = "forward")
cbind(summary(model1_forward)$which, "adjusted r^2" = summary(model1_forward)$adjr2)
## Backward selection
model1_backward <- regsubsets(score ~ rating + runtime + genre + month + year + votes + budget + gross + return_prop,
data = movies, method = "backward")
cbind(summary(model1_backward)$which, "adjusted r^2" = summary(model1_backward)$adjr2)
# ~~~~~ MODEL 2 ~~~~~~~~~
# fit model and summary output
model2 <- lm(formula = score ~ runtime + votes + budget, data = movies)
summary(model2)
# residual analysis
par(mfrow=c(2,2))
plot(model2)
par(mfrow=c(1,1))
# ~~~~ BoxCox Transformation ~~~~~~
# Boxcox for model2
boxcox(model2)
# ~~~~~ MODEL 3 ~~~~~~~~~
# square outcome variable (score)
score_sq <- (movies$score)^2
# fit model and summary output
model3 <- lm(formula = score_sq ~ runtime + votes + budget, data = movies)
summary(model3)
# residual analysis
plot(model3)
# ~~~~~ MODEL 4 ~~~~~~~~~
# create vector containing highest leverage points.
# (Pulp Fiction, The Dark Knight, The Shawshank Redemption)
highlev <- c(1148,2889,1147)
movies[highlev,]
# new dataframe without high leverage points
movies_lowlev <- movies[-highlev,]
rownames(movies_lowlev) <- 1:nrow(movies_lowlev)
# have to remove same values in score_sq
score_sq_ll <- score_sq[-highlev]
# fit model and summary output
model4 <- lm(formula = score_sq_ll ~ runtime + votes + budget, data = movies_lowlev)
summary(model4)
# residual analysis
plot(model4)
# high leverage
hl_2 <- c(1741,1147,3149)
movies_lowlev[hl_2,]
# seems like the movies that keep throwing off the model are those that are "big hits" or "classics"
# ~~~~~ MODEL 5 ~~~~~~~~~
# new dataframe without high leverage points
movies_lowlev2 <- movies_lowlev[-hl_2,]
rownames(movies_lowlev2) <- 1:nrow(movies_lowlev2)
# have to remove same values in score_sq_ll
score_sq_ll2 <- score_sq_ll[-hl_2]
# fit model and summary output
model5 <- lm(formula = score_sq_ll2 ~ runtime + votes + budget, data = movies_lowlev2)
summary(model5)
# residual analysis
plot(model5)
# high leverage
hl_3 <- c(3409,3668,1256)
movies_lowlev2[hl_3,]
boxcox(model5)
# ~~~~~ MODEL 6 ~~~~~~~~~
score_4th <- (score_sq_ll2)^2
# fit model and summary output
model6 <- lm(formula = score_4th ~ runtime + votes + budget, data = movies_lowlev2)
summary(model6)
# residual analysis
plot(model6)
# ~~~~~~~~ Residual Analysis: Formal Tests ~~~~~~~~
# Shapiro-Wilk Test
# test for normality
# H0: data are normally distributed
shapiro.test(resid(model6))
# we reject the null, so the residuals are not normal
# Box-Pierce Test
# test for correlated errors
# H0: The residuals are independently distributed
Box.test(model6$residuals)
# We reject the null, the residuals are independently distributed
# Breusch-Pagan Test
# test for homoskedasticity
# H0: the errors are homoskedastic
bptest(model6)
# We reject the null, the residuals are heteroskedastic (non constant variance)
# Gower dist: https://arxiv.org/ftp/arxiv/papers/2101/2101.02481.pdf
movies_clust <- movies[-1]
movies_clust$rating <- as.factor(movies_clust$rating)
movies_clust$genre <- as.factor(movies_clust$genre)
movies_clust$month <- as.factor(movies_clust$month)
gow_dist_full <- daisy(movies_clust, metric = "gower")
gow_full_hclust <- hclust(gow_dist_full)
plot(gow_full_hclust)
cut_gow_full_hclust <- cutree(gow_full_hclust, k = 3)
movies[cut_gow_full_hclust == 3, 1]
gow_dist_intuitive <- daisy(movies_clust[c(1, 3, 5, 7, 8)], metric = "gower")
gow_intuitive_hclust <- hclust(gow_dist_intuitive)
plot(gow_intuitive_hclust)
abline(h = 0.72, col = "red")
cut_gow_int_hclust <- cutree(gow_int_hclust, k = 6)
mean(movies$votes)
median(movies$votes)
mode(movies$votes)
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
getmode(movies$votes)
mean(movies$score[movies$votes < 1000])
mean(movies$score[movies$votes > 1000])
# ~~~~~ MODEL 2 ~~~~~~~~~
# fit model and summary output
model2 <- lm(formula = score ~ runtime + votes + budget, data = movies)
summary(model2)
# ~~~~ BoxCox Transformation ~~~~~~
# Boxcox for model2
boxcox(model2)
# residual analysis
plot(model6)
# ~~~~~ MODEL 6 ~~~~~~~~~
score_4th <- (score_sq_ll2)^2
# fit model and summary output
model6 <- lm(formula = score_4th ~ runtime + votes + budget, data = movies_lowlev2)
summary(model6)
# high leverage
hl_2 <- c(1741,1147,3149)
movies_lowlev[hl_2,]
# seems like the movies that keep throwing off the model are those that are "big hits" or "classics"
# ~~~~~ Responding to Q1 ~~~~~
ggpairs(movies[c("score", "votes")])
# From chart we see that the correlation is extremely significant.
var(movies$votes)
# From above note extremely high variability
movies_q1_1 <- movies[movies$votes >= 200000,]
ggpairs(movies_q1_1[c("score", "votes")])
mean(movies$score)
mean_q1_2 <- movies[movies$votes <= 1000,]
mean(mean_q1_2$score)
mean_q1_3 <- movies[movies$votes >= 500000,]
mean(mean_q1_3$score)
min(movies$votes)
max(movies$votes)
movies$name[movies$votes == 195]
movies$score[movies$votes == 195]
movies$score[movies$votes == 2400000]
mean(movies$score[movies$votes >= 500000])
